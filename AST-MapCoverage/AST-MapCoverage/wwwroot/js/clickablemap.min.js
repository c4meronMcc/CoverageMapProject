document.addEventListener('DOMContentLoaded', function () {
    const mapElement = document.getElementById('map');
    const svgPath = '/SVGMapOverlays2.svg';

    let selectedArea = null;
    let isDragging = false;
    let isMoving = false;
    let startX = 0;
    let startY = 0;
    let currentmapPinIcon = null;

    function loadSvgFile() {
        fetch(svgPath)
            .then(response => response.text())
            .then(svgText => {
                mapElement.innerHTML = svgText;
                addEventListeners();
                initializePanZoom();
            }).then(() => {
                //adding a click event listener to SVG paths
                document.querySelectorAll('path').forEach(function (path) {
                    //Initialized the clicked state for each path

                    console.log("adding event listener")
                    path.isClicked = false;

                    path.addEventListener('click', () => {
                        //giving the country name a variable
                        const layerName = path.getAttribute('vectornator:layername');
                        //giving the svgs id a variable
                        const SvgID = path.getAttribute('id');

                        //giving each image a variable
                        const GlobalVSATcoverage = document.getElementById('GlobalVSATcoverage');
                        const InmarsatGlobalXpress = document.getElementById('InmarsatGlobalXpress');
                        const InmarsatFleetBroadband = document.getElementById('InmarsatFleetBroadband');
                        const Thuraya = document.getElementById('Thuraya');

                        //text parts within country info
                        const Header = document.getElementById('CountryHeader');
                        const Text1 = document.getElementById('Text1');
                        const Text2 = document.getElementById('Text2');

                        //deciding what images are being shown based on the id that it has
                        if (SvgID == "All") {
                            document.getElementById("CountryInfo").style.display = "block";

                            //making sure that the images display is they are currently off
                            Thuraya.style.display = "block";
                            InmarsatFleetBroadband.style.display = "block";
                            InmarsatGlobalXpress.style.display = "block";
                            GlobalVSATcoverage.style.display = "block";

                            //changing the text and headers to fit the country Selected
                            Header.innerHTML = layerName;
                            Text1.innerHTML = "If you're looking for coverage over " + layerName + " then you have 5 options! Your options for coverage over " + layerName + " are found below"
                            Text2.innerHTML = "This is what the different coverage areas look like for " + layerName + " click on a coverage area if you want to see infomation about them."
                        }
                        if (SvgID == "I-G-IG-IF") {
                            document.getElementById("CountryInfo").style.display = "block";

                            //not displaying the images that we dont want
                            Thuraya.style.display = "none";
                            InmarsatFleetBroadband.style.display = "block";
                            InmarsatGlobalXpress.style.display = "block";
                            GlobalVSATcoverage.style.display = "block";

                            //changing the text and headers to fit the country Selected
                            Header.innerHTML = layerName;
                            Text1.innerHTML = "If you're looking for coverage over " + layerName + " then you have 4 options! Your options for coverage over " + layerName + " are found below"
                            Text2.innerHTML = "This is what the different coverage areas look like for " + layerName + " click on a coverage area if you want to see infomation about them."
                        }
                        if (SvgID == "I-IG") {
                            document.getElementById("CountryInfo").style.display = "block";

                            //not displaying the images that we dont want
                            Thuraya.style.display = "none";
                            InmarsatFleetBroadband.style.display = "none";
                            InmarsatGlobalXpress.style.display = "block";
                            GlobalVSATcoverage.style.display = "none";

                            //changing the text and headers to fit the country Selected
                            Header.innerHTML = layerName;
                            Text1.innerHTML = "If you're looking for coverage over " + layerName + " then you have 2 options! Your options for coverage over " + layerName + " are found below"
                            Text2.innerHTML = "This is what the different coverage areas look like for " + layerName + " click on a coverage area if you want to see infomation about them."
                        }
                        if (SvgID == "I-G-IG") {
                            document.getElementById("CountryInfo").style.display = "block";

                            //not displaying the images that we dont want
                            Thuraya.style.display = "none";
                            InmarsatFleetBroadband.style.display = "none";
                            InmarsatGlobalXpress.style.display = "block";
                            GlobalVSATcoverage.style.display = "block";

                            //changing the text and headers to fit the country Selected
                            Header.innerHTML = layerName;
                            Text1.innerHTML = "If you're looking for coverage over " + layerName + " then you have 3 options! Your options for coverage over " + layerName + " are found below"
                            Text2.innerHTML = "This is what the different coverage areas look like for " + layerName + " click on a coverage area if you want to see infomation about them."
                        }

                        //alert(layerName);

                        
                    })
                  
                });
            })
            .catch(error => console.error('Failed to load SVG file:', error));
    }

    function addEventListeners() {
        const areas = mapElement.querySelectorAll('path');

        areas.forEach(area => {
            area.addEventListener('mousedown', handleMouseDown);
            //area.addEventListener('');
            area.addEventListener('mouseup', handleMouseUp);
            area.addEventListener('mouseenter', handleMouseEnter);
            area.addEventListener('mouseleave', handleMouseLeave);
        });
        mapElement.addEventListener('mousemove', handleMouseMove);
        mapElement.addEventListener('click', handleAreaClick);
    }

    function handleMouseDown(event) {
        isDragging = true;
        startX = event.clientX;
        startY = event.clientY;
        console.log(startX, startY)
    }

 

    function handleMouseUp() {
        if (!isMoving && !isDragging) {
            clearSelection();
        }
        isDragging = false;
    }

    function handleMouseEnter() {
        if (isDragging) {
            mapElement.style.cursor = 'move';
        }
    }

    function handleMouseLeave() {
        mapElement.style.cursor = 'default';
    }

    function handleMouseMove(event) {
        if (isDragging) {
            const currentX = event.clientX;
            const currentY = event.clientY;
            const deltaX = currentX - startX;
            const deltaY = currentY - startY;

            if (deltaX !== 0 || deltaY !== 0) {
                isMoving = true;
                mapElement.style.cursor = 'move';
            }
        }
    }

    function handleAreaClick(event) {
        if (!isDragging && !isMoving) {
            const clickedElement = event.target;
            const isSeaOcean = clickedElement.classList.contains('sea-ocean');

            // Remove the previous pin icon if it exists
            const previousmapPinIcon = mapElement.querySelector('.mapPinIcon');
            if (previousmapPinIcon) {
                previousmapPinIcon.remove();
            }

            

            // Create the pin icon element
            const mapPinIcon = document.createElement('img');
            mapPinIcon.src = '/mapPinIcon.jpg'; // Update the path to match the location of the image
            mapPinIcon.classList.add('mapPinIcon');

            // Set the position of the pin icon based on the clicked coordinates
            const pinSizePercentage = 0.15; // Set the desired size percentage (e.g., 75%)
            const pinWidth = mapPinIcon.width * pinSizePercentage;
            const pinHeight = mapPinIcon.height * pinSizePercentage;
            const clickedX = event.clientX - pinWidth / 2; // Adjust the X coordinate by half the pin width
            const clickedY = event.clientY - pinHeight / 2; // Adjust the Y coordinate by half the pin height
            mapPinIcon.style.width = `${pinWidth}px`;
            mapPinIcon.style.height = `${pinHeight}px`;
            mapPinIcon.style.left = `${clickedX}px`;
            mapPinIcon.style.top = `${clickedY}px`;

            // Call the addmapPinIcon function with the clicked coordinates
            addmapPinIcon(clickedX, clickedY);

            // Toggle the selection
            if (clickedElement.classList.contains('clicked')) {
                clickedElement.style.fill = isSeaOcean ? '#B2BEB5' : '#899499';
                clickedElement.classList.remove('clicked');
                selectedArea = null;
            } else {
                clearSelection();

                // Highlight the clicked area
                clickedElement.style.fill = isSeaOcean ? '#6082B6' : '#8A9A5B';
                clickedElement.classList.add('clicked');
                selectedArea = clickedElement;
            }

            //console.log(clickedX, clickedY);
        }
        isMoving = false;
    }

    function clearSelection() {
        if (selectedArea) {
            const isSeaOcean = selectedArea.classList.contains('sea-ocean');
            selectedArea.style.fill = isSeaOcean ? '#B2BEB5' : '#899499';
            selectedArea.classList.remove('clicked');
        }
    }

    function addmapPinIcon(event) {
        // Remove the previous pin icon if it exists
        if (currentmapPinIcon) {
            currentmapPinIcon.remove();
        }

        // Create the new pin icon
        const mapPinIcon = document.createElement('img');
        mapPinIcon.src = '/mapPinIcon.jpg'; // Update the path to match the location of the image
        mapPinIcon.classList.add('mapPinIcon');
        mapPinIcon.style.position = 'absolute';

        // Set the size of the pin icon
        const pinSize = 30; // Adjust this value as desired
        mapPinIcon.style.width = `${pinSize}px`;
        mapPinIcon.style.height = `${pinSize}px`;

        // Calculate the position of the pin icon relative to the map element
        const mapBounds = mapElement.getBoundingClientRect();
        const pinX = event.clientX - mapBounds.left - window.pageXOffset - pinSize / 2;
        const pinY = event.clientY - mapBounds.top - window.pageYOffset - pinSize;

        mapPinIcon.style.left = `${pinX}px`;
        mapPinIcon.style.top = `${pinY}px`;


        // Append the pin icon to the map element
        mapElement.appendChild(mapPinIcon);

        // Store the reference to the current pin icon
        currentmapPinIcon = mapPinIcon;


        function updatePinPosition() {
            const mapBounds = mapElement.getBoundingClientRect();
            const mapX = mapBounds.left;
            const mapY = mapBounds.top;
            const pinX = x - pinWidth / 2 - mapX;
            const pinY = y - pinHeight - mapY;

            mapPinIcon.style.left = `${pinX}px`;
            mapPinIcon.style.top = `${pinY}px`;
        }

        // Add event listeners for map panning and zooming
        mapElement.addEventListener('scroll', updatePinPosition);
        mapElement.addEventListener('resize', updatePinPosition);

     
    }

  

    function addPinIcon(x, y) {
        const pin = document.createElement('div');
        pin.className = 'pin-icon';
        pin.style.left = (x - 10) + 'px';
        pin.style.top = (y - 10) + 'px';
        pin.style.backgroundImage = `url(${pinIconPath})`;
        mapElement.appendChild(pin);
    }

    function initializePanZoom() {
        const mapSvg = mapElement.querySelector('svg');
        const panZoomMap = svgPanZoom(mapSvg, {
            zoomEnabled: true,
            controlIconsEnabled: true,
            fit: true,
            center: true,
            minZoom: 1, // Set the minimum zoom level
        });

        function resizePanZoomContainer() {
            const mapRect = mapSvg.getBoundingClientRect();
            panZoomMap.resize(mapRect.width, mapRect.height);
        }

        // Resize the container initially
        resizePanZoomContainer();

        // Resize the container when the window is resized
        window.addEventListener('resize', resizePanZoomContainer);
    }

   

    loadSvgFile();
});


