document.addEventListener('DOMContentLoaded', function () {
    const mapElement = document.getElementById('map');
    const svgPath = '/SVGMapOverlays.svg';

    function loadSvgFile() {
        fetch(svgPath)
            .then(response => response.text())
            .then(svgText => {
                mapElement.innerHTML = svgText;
                addEventListeners();
                initializePanZoom();
            })
            .catch(error => console.error('Failed to load SVG file:', error));
    }

    // Add a click event listener to SVG paths
    document.querySelectorAll('#allLand path').forEach(function (path) {
        path.addEventListener('click', function () {
            // Toggle the clicked state for the current path
            this.isClicked = !this.isClicked;

            // Set the fill color based on the clicked state
            if (this.isClicked) {
                this.setAttribute('fill', '#8A9A5B');
            } else {
                this.setAttribute('fill', '');
            }
        });
    });

    function addEventListeners() {
        const paths = mapElement.querySelectorAll('path');
        paths.forEach(path => {
            path.addEventListener('click', function () {
                resetCountryColors();
                this.classList.add('clicked');
            });
        });
    }

    function resetCountryColors() {
        const clickedPaths = mapElement.querySelectorAll('.clicked');
        clickedPaths.forEach(path => {
            path.classList.remove('clicked');
        });
    }

    function initializePanZoom() {
        const mapSvg = mapElement.querySelector('svg');
        const panZoomMap = svgPanZoom(mapSvg, {
            zoomEnabled: true,
            controlIconsEnabled: true,
            fit: true,
            center: true,
        });

        function resizePanZoomContainer() {
            const mapRect = mapSvg.getBoundingClientRect();
            panZoomMap.resize(mapRect.width, mapRect.height);
        }

        // Resize the container initially
        resizePanZoomContainer();

        // Resize the container when the window is resized
        window.addEventListener('resize', resizePanZoomContainer);
    }
    //adding a click event listener to SVG paths
    document.querySelectorAll('path').forEach(function (path) {
        //Initialized the clicked state for each path
        path.isClicked = false;

        path.addEventListener('click', function () {
            //Toggle the clicked state for each path
            this.isClicked = !this.isClicked;


            if (this.isClicked) {

            }
            const countries = document.querySelectorAll('path');
            countries.forEach(country => {
                country.addEventListener('click', () => {
                    const layerName = country.getAttribute('vectornator:layerName');
                    alert("hello " + layerName);
                });
            });
        });


    });


    loadSvgFile();
});